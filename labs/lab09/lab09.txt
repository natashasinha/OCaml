SOLUTIONS TO THE PROBLEMS IN LAB 9
==================================

Note: Your work will be most likely be viewed using an editor. For this
reason DO NOT assume any special formatting abilities will be at work
when it is viewed. IN PARTICULAR, PUT IN LINE BREAKS AT REASONABLE
PLACES AND DO NOT USE TABS.


Answer to Problem I
-------------------

1. for all n, P(n) is the sum of all of the natural numbers from 0 to n

2. Base case: Show P(0) - P(0) is the sum of all of the natural numbers from 0 to 0. 
This can be seen in the expression if (n=0) then 0. Therefore this is trivially true.

Induction Step: for P(n+1) - we can see that P(n) is true through the expression 
else n + sumup(n-1). we are able to see that the input n is summed up with every 
element that comes before it, which is done through the recursive call of (n-1). we 
therefore know that P(n) for n, is the sum of all of the natural numbers from 0 to n. 
next we will consider P(n+1). since we know that P(n) is true from the previous statements, 
adding 1 does not change this, as the sum now adds n+1 to sumup n, and therefore must equal 
the sum of all of the numbers from 0 to n+1. thus P(n+1) is true.


Answer to Problem II
--------------------

1. sumup_aux gives us the sum of all of the numbers from 0 to n

2. Base case: Show P(0) - when n is equal to 0, sumup_aux returns n along with 0 as the sum. 
this can be seen in the expression if (n=0) then acc. at the end of this function sumup_aux is 
being called with n and 0 as the accumulator, therefore returning a sum of 0 and we know that 
the sum of the numbers from 0 to 0 is 0. thus, P(0) holds.

Inductive Step: the induction hypothesis gives us that sumup_aux ((n+1) + acc) is the sum of 
the natural numbers from 0 to (n+1). we can see in the expression sumup_aux (n-1) (n + acc) 
that n-1 is returned in place of n and (n+acc) is returned in place of the accumulator. every 
time this function runs, the accumulator is increased to be the sum and when it is added to n, 
we then get the sum of all of the numbers from 0 to n. since we know that P(n) is true, we can 
then conclude that P(n+1) must be true and must be the sum of all of the natural numbers from 
0 to n+1.

3. since sumup n simply calls the helper function sumup_aux which we have alredy proven satisfies 
P(n) and P(n+1), we know that sumup produces the sum of all of the numbers from 0 to n.



Answer to Problem III
---------------------

We have already proven that for all integer lists l1, for all lists l2, sumlist (append l1 l2) = 
(sumlist l1) + (sumlist l2). we now want to prove  that for all integer lists l, sumlist(reverse l) = sumlist l.

Base case: here we want to show P([]). in the expression [] -> [] we can see that if the input list 
is an empty list, the reverse of the empty list, which is also an empty list, is the output. 
therefore this is trivial.

Inductive Step: here we need to show that that sumlist (reverse l) = sumlist l. we can see this 
through the expression (h::t) -> append(reverse t)[h]. here, when a list with a head and a tail 
is input, the head is separated and put into its own list. the remainder of the list (the tail) 
is then recursively called with the reverse function, and that is then called with the append 
function. here, the list is being separated one element at a time, and being appended to the 
"head" of the list, therefore producing a list in reverse order. we have already proven that 
the append function preserves the sums of the list, and we can see here that none of the 
values are being altered, therefore allowing us to see that the sums of the list are being 
preserved in reverse as well.


Answer to Problem IV
--------------------

Proof 1: 
for all t of type ('a btree), for all x of type 'a, for all t' of type ('a btree), 
(if(insert t x) evaluates to t' then either minTree t' = minTree t or minTree t' = Some x

Base Case: t is Empty - here we have to show that for all x of type 'a, (if(insert Empty x) 
evaluates to t' then either minTree t' = minTree t or minTree t' = Some x). we can observe 
that the t' = Node(x,Empty,Empty) we are then able to see that minTree t' is Some x.

Induction Step: we can also show that if (insert t x) evaluates to t', then either 
minTree t' = minTree t or minTree t' = Some x. assuming that if (insert l x) evaluates 
to l' then either minTree l' = minTree l or minTree l' = Some x. here, we have two cases to consider:

in the case that (x<i), t' = Node(i,l',r) where l' = insert l x, we know that (minTree l') 
is equal to either minTree l or Some x. in both situations, we satisfy the required property.

in the case that (x is not less than i), t' = Node(i,l,insert r). here minTree t and minTree t' 
depend on minTree l and i the same way, and therefore must be equal.

Proof 2: 
for all t of type ('a btree), for all x of type 'a, for all t' of type ('a btree), 
(if(insert t x) evaluates to t' then either maxTree t' = maxTree t or maxTree t' = Some x)

Base Case: t is Empty - here we have to show that for all x of type 'a, (if(insert Empty x) 
evaluates to t' then either maxTree t' = maxTree t or maxTree t' = Some x). we can observe 
that t' = Node(x,Empty,Empty). we are then able to see that maxTree t' is Some x.

Induction Step: we can observe that t' = Node(x,Empty,Empty) we can see that maxTree t' is 
Some x. using t as Node(i,l,r) we can show the property when we consider the following 2 cases:

if (x<i): t' = Node(i,insert l x,r). here maxTree t and maxtree t' both depend on maxTree r in 
the same way and therefore must be equal.

if (x is not less than y): here t' = Node(i,l,r') where r' = (insert r x). we know through 
induction that (maxTree r' = maxTree r) or maxTree l' = Some x. in the first case we can 
see that maxTree t' = maxTree t and in the second case we can see that maxTree = Some x, 
and in both situations the property is satisfied.
